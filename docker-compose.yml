version: '3.8'

services:
  reverse_proxy:
    image: nginx:latest
    container_name: reverse_proxy
    ports:
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - api_gateway
    networks:
      - backend

  api_gateway:
    image: kong:latest
    container_name: api_gateway
    ports:
      - "8000:8000" # Kong Gateway
      - "8001:8001" # Kong Admin API
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_DECLARATIVE_CONFIG: "/kong.yml"
    volumes:
      - ./kong.yml:/kong.yml:ro
    depends_on:
      - keycloak
      - service_one
    networks:
      - backend

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      DB_VENDOR: h2
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    ports:
      - "8080:8080" # Keycloak UI and API
    networks:
      - backend

  service_one:
    image: python:3.9-slim
    container_name: service_one
    command: >
      sh -c "
      pip install flask &&
      echo \"from flask import Flask, jsonify;
      app = Flask(__name__);
      @app.route('/service-one', methods=['GET'])
      def service_one():
          return jsonify({'message': 'Hello from Service One'});
      app.run(host='0.0.0.0', port=5000)\" > app.py &&
      python app.py"
    ports:
      - "5001:5000" # Internal service exposed for testing
    networks:
      - backend

networks:
  backend:
    driver: bridge
